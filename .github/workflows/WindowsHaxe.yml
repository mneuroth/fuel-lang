# This is a basic workflow to help you get started with Actions

name: Windows Haxe

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  create_release:

    name: Prepare release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      if: contains(github.ref, 'release')
      uses: actions/checkout@v3
    - name: Create Release
      if: contains(github.ref, 'release')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      if: contains(github.ref, 'release')
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      if: contains(github.ref, 'release')
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build_haxe:
    # The type of runner that the job will run on
    runs-on: windows-latest
    needs: create_release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.3.3

      # Install Haxe
      - name: Install Haxe compiler
        run: |          
          haxe --version
          haxelib install utest
          haxelib install hxjava
          haxelib install hxcpp
          haxelib install hxcs
          haxelib install hxnodejs
          haxe
          haxe --version

      - name: Install 7Zip PowerShell Module
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose
        
      # Build the project
      - name: Build the project
        run: |
          cd HaxeLisp
          haxe build.hxml
          dir
          dir src
          dir bin
          dir bin\fuel.java
          dir bin\fuel.cpp
          dir bin\fuel.cs
          dir bin\fuel.cs\bin
          java -jar ./bin/fuel.java/Fuel.jar -e "(+ 1 2 3)" -t
          ./bin/fuel.cpp/Fuel -e "(+ 1 2 3)" -t
          ./bin/fuel.cs/bin/Fuel.exe -e "(+ 1 2 3)" -t
          python3 ./bin/fuel.py -e "(+ 1 2 3)" -t
          python3 ./bin/fuel.py -e "(println (version))"
          $result = &{python3 ./bin/fuel.py -e "(println (version))"}
          echo $result
          $env:CURRENT_TAG = $result
          echo "CURRENT_TAG=$result" >> $GITHUB_ENV
          echo $CURRENT_TAG
          echo $env:CURRENT_TAG
          mkdir all_haxe_bins
          mkdir all_haxe_bins\Library
          copy "..\Library\fuellib.fuel" all_haxe_bins\Library
          copy "..\README.md" all_haxe_bins
          copy "..\LICENSE" all_haxe_bins
          dir
          powershell Compress-7Zip ".\bin\fuel.java\Fuel.jar" -ArchiveFileName "fuel_binaries_java_$env:CURRENT_TAG.zip" -Format Zip
          powershell Compress-7Zip ".\bin\fuel.java\Fuel.jar" -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel.java\Fuel.jar" all_haxe_bins
          dir
          powershell Compress-7Zip ".\bin\fuel.cpp\Fuel.exe" -ArchiveFileName "fuel_binaries_cpp_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel.cpp\Fuel.exe" ".\bin\fuel.cpp\FuelCpp.exe"
          copy ".\bin\fuel.cpp\FuelCpp.exe" all_haxe_bins
          powershell Compress-7Zip ".\bin\fuel.cpp\FuelCpp.exe" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          dir
          powershell Compress-7Zip ".\bin\fuel.cs\bin\Fuel.exe" -ArchiveFileName "fuel_binaries_cs_$env:CURRENT_TAG.zip" -Format Zip
          powershell Compress-7Zip ".\bin\fuel.cs\bin\Fuel.exe" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel.cs\bin\Fuel.exe" all_haxe_bins
          dir
          powershell Compress-7Zip ".\bin\fuel.py" -ArchiveFileName "fuel_binaries_py_$env:CURRENT_TAG.zip" -Format Zip
          powershell Compress-7Zip ".\bin\fuel.py" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel.py" all_haxe_bins
          dir
          powershell Compress-7Zip ".\bin\fuel.js" -ArchiveFileName "fuel_binaries_js_$env:CURRENT_TAG.zip" -Format Zip
          powershell Compress-7Zip ".\bin\fuel.js" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel.js" all_haxe_bins
          dir
          powershell Compress-7Zip ".\bin\fuel_node.js" -ArchiveFileName "fuel_binaries_js_node_$env:CURRENT_TAG.zip" -Format Zip
          powershell Compress-7Zip ".\bin\fuel_node.js" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          copy ".\bin\fuel_node.js" all_haxe_bins
          dir
          copy ".\bin\fuel.js" all_haxe_bins
          powershell Compress-7Zip "..\Library\fuellib.fuel" -Append -ArchiveFileName "fuel_only_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          dir
          dir all_haxe_bins
          powershell Compress-7Zip ".\all_haxe_bins" -ArchiveFileName "fuel_all_haxe_binaries_$env:CURRENT_TAG.zip" -Format Zip
          dir
          #zip fuel_binaries.zip ./bin/fuel.java/Fuel.jar ./bin/fuel.cpp/Fuel ./bin/fuel.cs/bin/Fuel.exe ./bin/fuel.py
          #unzip -v fuel_binaries.zip
          #dir

      # Test the project
      - name: Test the project
        run: |
          # use this command:
          # haxe unittest.hxml
          # or this:
          cd HaxeLisp
          cd src
          haxe --interp --main Fuel
          echo "====="
          haxe --interp --class-path ..\tests --library utest --main FuelTest
          ecb
          echo "++++++++++++++++"
          echo $CURRENT_TAG
          echo $env:CURRENT_TAG
          echon "done."

      - name: Upload Release Asset
        if: contains(github.ref, 'release')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: HaxeLisp/fuel_all_haxe_binaries_$env:CURRENT_TAG.zip
          asset_name: fuel_all_haxe_binaries_$env:CURRENT_TAG.zip
          asset_content_type: application/zip

  build_cs:

    runs-on: windows-latest
    needs: create_release

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Install 7Zip PowerShell Module
        if: contains(github.ref, 'release')
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose
          
      # copied from WindowsCS.yml    
      - name: Build C# release
        if: contains(github.ref, 'release')
        run: |
          dir
          cd CsLisp
          dir
          dotnet build --configuration Release
          dir
          dir CsLispDebugger
          dir CsLispDebugger\bin\Release\net6.0
          copy CsLispDebugger\bin\Release\net6.0\FuelDebugger.dll bin\Release\net6.0
          copy CsLispCompiler\bin\Release\net6.0\FuelCompiler.dll bin\Release\net6.0
          mkdir bin\Release\net6.0\Library
          copy ..\Library\fuellib.fuel bin\Release\net6.0\Library
          copy ..\LICENSE bin\Release\net6.0
          copy ..\README.md bin\Release\net6.0
          cd bin
          dir
          cd Release
          dir
          cd net6.0
          dir
          .\fuel.exe -v
          .\fuel.exe -e "(println (platform))"
          .\fuel.exe
          $result = &{.\fuel.exe -e "(println (version))"}
          echo $result
          $env:CURRENT_TAG = $result
          cd ..
          powershell Compress-7Zip ".\net6.0" -ArchiveFileName "fuel_cs_binaries_$env:CURRENT_TAG.zip" -Format Zip
          dir          
 
      - name: Upload Release Asset
        if: contains(github.ref, 'release')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: CsLisp/bin/Release/fuel_cs_binaries_$env:CURRENT_TAG.zip
          asset_name: fuel_cs_binaries_$env:CURRENT_TAG.zip
          asset_content_type: application/zip

  build_cpp:

    runs-on: windows-latest
    needs: create_release

    steps:
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install 7Zip PowerShell Module
        if: contains(github.ref, 'release')
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose

      # copied from WindowsCpp.yml    
      - name: Build the project with CMake
        if: contains(github.ref, 'release')
        run: |
          cd CppLisp
          cmake --version
          cmake CMakeLists.txt
          cmake --build . --config Release
          dir
          dir Release
          dir x64
          dir x64\Release
          dir CppLispInterpreterTests
          dir CppLispInterpreter
          dir CppLispInterpreter\Release
          copy CppLispInterpreter\Release\FuelInterpreter.dll Release
          dir CppLispDebugger
          dir CppLispDebugger\Release
          copy CppLispDebugger\Release\FuelDebugger.dll Release
          mkdir Release\Library
          copy ..\Library\fuellib.fuel Release\Library
          copy ..\LICENSE Release
          copy ..\README.md Release
          cd Release
          dir
          dir Library
          ./fuel -v
          ./fuel -e "(println (platform))"
          ./fuel
          $result = &{./fuel -e "(println (version))"}
          echo $result
          $env:CURRENT_TAG = $result
          echo "CURRENT_TAG=$result" >> $GITHUB_ENV
          echo $CURRENT_TAG
          echo $env:CURRENT_TAG
          cd ..
          powershell Compress-7Zip ".\Release" -ArchiveFileName "fuel_cpp_binaries_$env:CURRENT_TAG.zip" -Format Zip
          dir
          cd ..
          dir
 
      - name: Upload Release Asset
        if: contains(github.ref, 'release')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: CppLisp/fuel_cpp_binaries_$env:CURRENT_TAG.zip
          asset_name: fuel_cpp_binaries_$env:CURRENT_TAG.zip
          asset_content_type: application/zip
 